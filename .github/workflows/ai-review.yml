name: AI Review

on:
  # Manual only; AI review is optional and runs when OPENAI_API_KEY is configured
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write   # required for Code Scanning SARIF uploads
  issues: write            # required for posting PR comments (optional step below)

jobs:
  ai_review:
    # Manual run only. Scripts soft-skip if OPENAI_API_KEY is not set.
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ai-review-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # safer for PRs from forks

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Do NOT set cache: 'npm' since we use an explicit cache step below

      # Explicit npm cache (download/tarball store), *not* node_modules
      - name: Cache npm downloads
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node20-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node20-npm-

      # Harden installs on untrusted PRs (forks)
      - name: Install deps (PR-safe)
        if: github.event_name == 'pull_request'
        run: npm ci --ignore-scripts --prefer-offline

      # Full install on trusted runs (e.g., workflow_dispatch)
      - name: Install deps (trusted)
        if: github.event_name != 'pull_request'
        run: npm ci --prefer-offline

      - name: Ensure SARIF directory exists
        run: mkdir -p sarif

      - name: Detect ai:review script
        id: has_script
        shell: bash
        run: |
          val="$(npm pkg get scripts.ai:review 2>/dev/null | tr -d '\" \n\r')"
          if [[ -n "$val" && "$val" != "undefined" ]]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run AI review (optional)
        if: steps.has_script.outputs.exists == 'true'
        id: ai_review
        timeout-minutes: 10
        run: |
          set -e
          npm run ai:review || echo "::notice::ai:review script ran with non-zero exit; continuing."
          # Flag whether SARIF was generated
          if ls sarif/*.sarif 1>/dev/null 2>&1; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Note missing ai:review
        if: steps.has_script.outputs.exists != 'true'
        run: echo "::notice::No ai:review script found; skipping."

      - name: Upload SARIF to Code Scanning
        if: always() && steps.ai_review.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif

      - name: Upload SARIF artifact (debug)
        if: always() && steps.ai_review.outputs.sarif_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ai-review-sarif
          path: sarif/*.sarif

      # Optional: post a summary comment on non-fork PRs
      - name: Post review comment
        if: >
          steps.ai_review.outputs.sarif_exists == 'true' &&
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('sarif').filter(f => f.endsWith('.sarif'));
            const list = files.map(f => `- \`${f}\``).join('\n');
            const body = `## ðŸ¤– AI Review\nThe workflow generated the following SARIF artifact(s):\n\n${list}\n\nCheck **Security â†’ Code scanning alerts** for details.`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body
            })