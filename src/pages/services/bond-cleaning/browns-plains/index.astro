---
import services from '~/data/services.json';
import suburbs from '~/data/suburbs.json';
import coverage from '~/data/serviceCoverage.json' assert { type: 'json' };
import MainLayout from '~/layouts/MainLayout.astro';
import slugify from '~/utils/slugify.js';
import FaqBlock from '~/components/FaqBlock.astro';
import faqBond from '~/content/faq.service-bond.json';
import ServiceNav from '~/components/ServiceNav.astro';
import { getCrossServiceLinks } from '~/lib/crossService';
import { toServiceCards } from '~/lib/serviceNav.adapter';

export async function getStaticPaths() {
  return services.map(svc => ({ params: { service: svc.slug }, props: { service: svc } }));
}

const service = (Astro.props && Astro.props.service)
  ? Astro.props.service
  : (Array.isArray(services) && services.length
    ? (services.find(s => s.slug === 'bond-cleaning') || services[0])
    : { slug: '', title: 'Services', description: 'Service information' });

const suburb = { name: 'Browns Plains', slug: 'browns-plains' };
const title = `${service.title} in ${suburb.name} — One N Done`;
const description = `Professional ${service.title} in ${suburb.name}. Agent-ready cleaning and full re-clean support.`;
import { absoluteUrl } from '~/lib/url';
const canonical = absoluteUrl(`/services/${service.slug}/${suburb.slug}/`);
const covered = Array.isArray((coverage as any)[service.slug]) ? (coverage as any)[service.slug] : [];
const known = new Set(suburbs.map(s => s.slug));
const top3 = covered.filter((slug: string) => known.has(slug)).slice(0, 3);
const list = suburbs.filter(s => top3.includes(s.slug));
const breadcrumb = {
  itemListElement: [
    { '@type': 'ListItem', position: 1, name: 'Services', item: new URL('/services', import.meta.env.SITE || 'https://example.com').toString() },
    { '@type': 'ListItem', position: 2, name: service.title },
    { '@type': 'ListItem', position: 3, name: suburb.name }
  ]
};
---

<MainLayout title={title} description={description} canonical={canonical} breadcrumb={breadcrumb}>
  <section class="max-w-6xl mx-auto px-4 py-12">
    <h1 class="text-4xl font-extrabold text-deep-navy">{service.title} — {suburb.name}</h1>
    <p class="mt-3 text-lg text-gray-warm-700 max-w-3xl">{description}</p>

    <div class="mt-6">
      <a href="#quote" class="inline-flex items-center gap-2 bg-sky-700 hover:bg-sky-800 text-white font-bold px-5 py-3 rounded-full shadow">Get a Quote</a>
    </div>

    <h2 class="mt-10 text-2xl font-bold text-deep-navy">Popular Areas</h2>
    <ul class="mt-4 grid sm:grid-cols-2 md:grid-cols-3 gap-3">
      {list.map(sub => (
        <li>
          <a href={`/services/${service.slug}/${slugify(sub.name)}/`} class="block bg-white px-4 py-3 rounded-xl shadow-sm border border-gray-warm-200 hover:shadow-lg hover:border-fresh-sky/60 text-deep-navy hover:text-fresh-sky transition">
            {sub.name}
          </a>
        </li>
      ))}
    </ul>
  </section>

  {(() => {
    const { crossServices, localGuides } = getCrossServiceLinks({ suburbSlug: suburb.slug, currentService: 'bond-cleaning' });
    const cards = toServiceCards(crossServices, { currentSuburb: suburb.slug });
    return (
      <nav data-relservices class="max-w-6xl mx-auto px-4 mb-6" aria-label="Related services">
        <ServiceNav services={cards} suburbs={[]} currentSuburb={suburb.slug} localGuidesHref={localGuides} />
      </nav>
    );
  })()}

  <section class="max-w-6xl mx-auto px-4 py-6">
    <FaqBlock items={faqBond.items} headline={`${service.title} FAQs`} />
  </section>
</MainLayout>
