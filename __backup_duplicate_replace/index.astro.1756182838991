---
import Layout from '~/layouts/MainLayout.astro';
import { paths, rel } from '~/lib/paths';
import topics from '~/data/topics.json';
import { resolveClusterSlug } from '~/utils/geoHandler';
import { CANONICAL_CLUSTERS } from '~/lib/clusters';

export async function getStaticPaths() {
  return CANONICAL_CLUSTERS.map(cluster => ({ params: { cluster } }));
}

const { cluster } = Astro.params;
const canonical = resolveClusterSlug(cluster);
if (canonical !== cluster) {
  return Astro.redirect(rel.blogCluster(canonical), 301);
}
const clusterSlug = cluster;
const clusterName = clusterSlug;
const normalizedLabel = clusterName;
const allCats = Array.from(new Set(topics.map(t => t.category)));
// Simple region filter: include posts whose title/description mention the region or are general
const regionKey = clusterSlug.replace('-', ' ');
const filteredTopics = topics.filter(t => {
  const text = `${t.title} ${t.description}`.toLowerCase();
  if (text.includes('ipswich') && normalizedLabel.toLowerCase().includes('ipswich')) return true;
  if (text.includes('brisbane') && normalizedLabel.toLowerCase().includes('brisbane')) return true;
  if (text.includes('logan') && normalizedLabel.toLowerCase().includes('logan')) return true;
  // general categories allowed everywhere
  return !/(ipswich|brisbane|logan)/i.test(text);
});
---

<Layout title={`Blog – ${normalizedLabel}`} description={`Guides and checklists for renters in ${normalizedLabel}.`} canonical={paths.blogCluster(clusterSlug)}>
  <article class="max-w-4xl mx-auto py-12 px-4">
    <nav aria-label="Breadcrumb" class="mb-3 text-sm text-slate-600">
      <ol class="flex items-center gap-1">
  <li><a href={rel.blogRoot()} class="hover:underline">Blog</a></li>
        <li aria-hidden="true">/</li>
        <li aria-current="page" class="text-slate-800 font-medium">{clusterName}</li>
      </ol>
    </nav>
  <h1 class="text-3xl md:text-4xl font-extrabold mb-4 text-deep-navy">{normalizedLabel} Blog</h1>
  <p class="text-slate-700 mb-6">Browse guides, checklists, and local advice for {normalizedLabel} renters.</p>

    <section class="mb-6">
      <h2 class="text-lg font-bold mb-2">Categories</h2>
      <ul class="flex flex-wrap gap-3">
        {allCats.map(cat => (
          <li><a class="px-3 py-1 rounded-full bg-slate-100 hover:bg-slate-200" href={rel.blogCategory(clusterSlug, cat)}>{cat}</a></li>
        ))}
      </ul>
    </section>

    <section>
      <h2 class="text-lg font-bold mb-2">All topics</h2>
      <ul class="grid md:grid-cols-2 gap-4">
  {filteredTopics.map(t => (
          <li class="border rounded-lg p-4 hover:shadow">
            <a class="text-sky-700 font-semibold hover:underline" href={rel.blogPost(clusterSlug, t.slug)}>{t.title}</a>
            <p class="text-sm text-slate-600 mt-1">{t.description}</p>
            <p class="text-xs text-slate-500 mt-2">Category: {t.category}</p>
          </li>
        ))}
      </ul>
    </section>
  </article>
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
  {"@type": "ListItem", "position": 1, "name": "Blog", "item": paths.blogRoot()},
  {"@type": "ListItem", "position": 2, "name": normalizedLabel}
    ]
  })} />
</Layout>

<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "url": paths.blogCluster(clusterSlug),
  "name": `Blog — ${normalizedLabel}`
})} />
